#!/usr/bin/env sage
# coding=utf-8

from sage.all import *

n = 152892010443090161139450520363336518176742831599245145269153050396304564578907061795002905497998181142150084756273027299413611874514332068143865940235470562936379188762997683217102550513594953558853595307850654237744631156477403609463962491704648853366488908634011293294315042964988628571048954313358560384637

c = (106401526983274935175554163521885709809458025472653542921421418077722955983292668441227764583037239343668045172131341517128947139240387701114722850059096442966228423310654842102708720586878987358201100671623722877133703007579985268013756391009593306931619413138182981344221190238429916930061095280892583295263, 54470798161956075480403090700211786713469572024746803641784226923977142081019650577257940680362357610394133057340134544650997598288856840818386679124943605079080275121081252172800511221049038683530736321128773529112806040362302220933880826210577342563310230742149978255782511061623867115574492187972433541543)

PR.<x,y> = PolynomialRing(Zmod(n))
gp = Gp(stacksize=1024*1024*512) 

def getflag(k):
    f = (x + k * y) ^ 4919
    coe = f.coefficients()
    ex = f.exponents()
    print "Get coe,exp"
    f1 = 0
    f2 = 0
    for i in xrange(len(ex)):
        re, im = ex[i]
        case = im % 4
        unit_f = coe[i] * x ^ re
        if case == 0:
            f1 += unit_f
        elif case == 1:
            f2 += unit_f
        elif case == 2:
            f1 -= unit_f
        elif case == 3:
            f2 -= unit_f
        if i % 100 == 0:
            print i
    f1 -= c[0]
    f2 -= c[1]
    gp.set('g','gcd(Mod({},{}),Mod({},{}))'.format(f1,n,f2,n))
    print gp.get('g')
    res = gp('liftall(-Vec(g / Vec(g)[1])[2])')
    return res

int_flag = getflag(1)
hex_flag = hex(int(int_flag)).strip('L').split('00')[-1].lstrip('0')
print hex_flag.decode('hex')
