set602268 = """c|w{\xf2ko\xc50\x01g+\xfe\xd7\xabv\xca\x82\xc9}\xfaYG\xf0\xad\xd4\xa2\xaf\x9c\xa4r\xc0\xb7\xfd\x93&6?\xf7\xcc4\xa5\xe5\xf1q\xd81\x15\x04\xc7#\xc3\x18\x96\x05\x9a\x07\x12\x80\xe2\xeb\'\xb2u\t\x83,\x1a\x1bnZ\xa0R;\xd6\xb3)\xe3/\x84S\xd1\x00\xed \xfc\xb1[j\xcb\xbe9JLX\xcf\xd0\xef\xaa\xfbCM3\x85E\xf9\x02\x7fP<\x9f\xa8Q\xa3@\x8f\x92\x9d8\xf5\xbc\xb6\xda!\x10\xff\xf3\xd2\xcd\x0c\x13\xec_\x97D\x17\xc4\xa7~=d]\x19s`\x81O\xdc"*\x90\x88F\xee\xb8\x14\xde^\x0b\xdb\xe02:\nI\x06$\\\xc2\xd3\xacb\x91\x95\xe4y\xe7\xc87m\x8d\xd5N\xa9lV\xf4\xeaez\xae\x08\xbax%.\x1c\xa6\xb4\xc6\xe8\xddt\x1fK\xbd\x8b\x8ap>\xb5fH\x03\xf6\x0ea5W\xb9\x86\xc1\x1d\x9e\xe1\xf8\x98\x11i\xd9\x8e\x94\x9b\x1e\x87\xe9\xceU(\xdf\x8c\xa1\x89\r\xbf\xe6BhA\x99-\x0f\xb0T\xbb\x16"""
set602394 = '''\x00\x02\x04\x06\x08\n\x0c\x0e\x10\x12\x14\x16\x18\x1a\x1c\x1e "$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\x80\x82\x84\x86\x88\x8a\x8c\x8e\x90\x92\x94\x96\x98\x9a\x9c\x9e\xa0\xa2\xa4\xa6\xa8\xaa\xac\xae\xb0\xb2\xb4\xb6\xb8\xba\xbc\xbe\xc0\xc2\xc4\xc6\xc8\xca\xcc\xce\xd0\xd2\xd4\xd6\xd8\xda\xdc\xde\xe0\xe2\xe4\xe6\xe8\xea\xec\xee\xf0\xf2\xf4\xf6\xf8\xfa\xfc\xfe\x1b\x19\x1f\x1d\x13\x11\x17\x15\x0b\t\x0f\r\x03\x01\x07\x05;9?=3175+)/-#!\'%[Y_]SQWUKIOMCAGE{y\x7f}sqwukiomcage\x9b\x99\x9f\x9d\x93\x91\x97\x95\x8b\x89\x8f\x8d\x83\x81\x87\x85\xbb\xb9\xbf\xbd\xb3\xb1\xb7\xb5\xab\xa9\xaf\xad\xa3\xa1\xa7\xa5\xdb\xd9\xdf\xdd\xd3\xd1\xd7\xd5\xcb\xc9\xcf\xcd\xc3\xc1\xc7\xc5\xfb\xf9\xff\xfd\xf3\xf1\xf7\xf5\xeb\xe9\xef\xed\xe3\xe1\xe7\xe5'''
set602494 = '\x00\x03\x06\x05\x0c\x0f\n\t\x18\x1b\x1e\x1d\x14\x17\x12\x110365<?:9(+.-$\'"!`cfelojix{~}twrqPSVU\\_ZYHKNMDGBA\xc0\xc3\xc6\xc5\xcc\xcf\xca\xc9\xd8\xdb\xde\xdd\xd4\xd7\xd2\xd1\xf0\xf3\xf6\xf5\xfc\xff\xfa\xf9\xe8\xeb\xee\xed\xe4\xe7\xe2\xe1\xa0\xa3\xa6\xa5\xac\xaf\xaa\xa9\xb8\xbb\xbe\xbd\xb4\xb7\xb2\xb1\x90\x93\x96\x95\x9c\x9f\x9a\x99\x88\x8b\x8e\x8d\x84\x87\x82\x81\x9b\x98\x9d\x9e\x97\x94\x91\x92\x83\x80\x85\x86\x8f\x8c\x89\x8a\xab\xa8\xad\xae\xa7\xa4\xa1\xa2\xb3\xb0\xb5\xb6\xbf\xbc\xb9\xba\xfb\xf8\xfd\xfe\xf7\xf4\xf1\xf2\xe3\xe0\xe5\xe6\xef\xec\xe9\xea\xcb\xc8\xcd\xce\xc7\xc4\xc1\xc2\xd3\xd0\xd5\xd6\xdf\xdc\xd9\xda[X]^WTQRC@EFOLIJkhmngdabspuv\x7f|yz;8=>7412# %&/,)*\x0b\x08\r\x0e\x07\x04\x01\x02\x13\x10\x15\x16\x1f\x1c\x19\x1a'
xor1 = ['<O\xcf\t\x88\x15\xf7\xab\xa6\xd2\xae(\x16\x15~+',
        '05766c2a3939a323b12c548817fefaa0'.decode('hex'),
        '7ff659737a80355943b9967af295c2f2'.decode('hex'),
        '3b887a6d447e231e3efe16477d47803d'.decode('hex'),
        '00ad0bdb3b2571b67f5b52a841a544ef'.decode('hex'),
        'bc15f911bcb8f2ca879d837cf8c6d1d4'.decode('hex'),
        'fd9300ca4186f9dbfd3e0b117aa3886d'.decode('hex'),
        '4fdca64eb24fa684f3c95f5f0ef7544e'.decode('hex'),
        '2f298d7f60f52b31d2ba8db52173d2ea'.decode('hex'),
        '6e005c574129d12821dcfa19f36677ac'.decode('hex'),
        'a60c63b6c80c3fe18925eec9a8f914d0'.decode('hex')]
shuffle = '\x0b\x06\x01\x0c\x07\x02\r\x08\x03\x0e\t\x04\x0f\n\x05\x00'

import itertools

def f1(c):
    res = ''
    for i in range(16):
        res += chr(ord(c[i]) ^ ord(xor1[k][i]))
    return res

def f2(c):
    res = ''
    for i in range(16):
        res += chr(set602268.index(c[i]))
    return res

def f3(c):
    res = [None] * 16
    for i in range(16):
        res[15-ord(shuffle[i])] = c[i]
    return ''.join(res)

def f4(c):
    res = ''
    for i in range(0,16,4):
        res += complexdecrypt(c[i:i+4])
    return res

def complexdecrypt(c):
    x = ord(c[0])
    y = ord(c[1])
    z = ord(c[2])
    w = ord(c[3])
    for a,b,c in itertools.product(range(256), repeat=3):
        d = ord(set602494[a]) ^ ord(set602394[b]) ^ c ^ y
        if (ord(set602394[a])^b^c^ord(set602494[d]) == x) and (a^ord(set602494[b])^ord(set602394[c])^d == z) and (a^b^ord(set602494[c])^ord(set602394[d]) == w):
            return ''.join(map(chr,[a,b,c,d]))

blockencrypted = '443c80520c3b6fb53ae23ecfbaf18827'
cry = ''.join((reversed(encrypted.decode('hex'))))
k = 10
print cry.encode('hex')

cry = f1(cry)
cry = f3(cry)
cry = f2(cry)
while 1:
    k -= 1
    if k == 0: break
    cry = f1(cry)
    cry = f4(cry)
    cry = f3(cry)
    cry = f2(cry)
    print cry.encode('hex')
cry = f1(cry)
print ''.join(reversed(cry))
